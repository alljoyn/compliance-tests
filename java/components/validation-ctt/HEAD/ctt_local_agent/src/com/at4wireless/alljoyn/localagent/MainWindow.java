/* * Copyright AllSeen Alliance. All rights reserved. * *    Permission to use, copy, modify, and/or distribute this software for any *    purpose with or without fee is hereby granted, provided that the above *    copyright notice and this permission notice appear in all copies. * *    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES *    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF *    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR *    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES *    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN *    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF *    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. */package com.at4wireless.alljoyn.localagent;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dialog;import java.awt.Dimension;import java.awt.EventQueue;import java.awt.Font;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.GridLayout;import java.awt.HeadlessException;import java.awt.Image;import java.awt.Insets;import java.awt.Rectangle;import java.awt.Toolkit;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.FocusEvent;import java.awt.event.FocusListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.awt.image.BufferedImage;import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.JarURLConnection;import java.net.MalformedURLException;import java.net.URI;import java.net.URISyntaxException;import java.net.URL;import java.net.URLClassLoader;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.ArrayList;import java.util.List;import javax.imageio.ImageIO;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JDialog;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPasswordField;import javax.swing.JTextField;import javax.swing.UIManager;import javax.ws.rs.core.HttpHeaders;import javax.ws.rs.core.MediaType;import javax.ws.rs.core.UriBuilder;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpGet;import org.apache.http.entity.BufferedHttpEntity;import org.apache.http.impl.client.HttpClientBuilder;import org.w3c.dom.Document;import org.w3c.dom.Element;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import org.xml.sax.SAXException;import com.sun.jersey.api.client.Client;import com.sun.jersey.api.client.ClientHandlerException;import com.sun.jersey.api.client.ClientResponse;import com.sun.jersey.api.client.WebResource;import com.sun.jersey.api.client.config.ClientConfig;import com.sun.jersey.api.client.config.DefaultClientConfig;import com.sun.jersey.api.representation.Form;/** * The Class MainWindow. */ public class MainWindow   {	/** The version of cct_local_agent. */	private static String version="v1.1.0";	/** The Jframe that draws all the others windows. */	private static JDialog frame;		/** The user field for login. */	private JTextField userField;	/** The connect msg, used when trying to connect the web server. */	private String connectMsg="Connecting...";	/** The connecting label, used when trying to connect the web server. */	private JLabel connectingLabel;	/** The test cases panel. */	private TestCasesWindow testCasesPanel=null;	/** The login button. */	private JButton Button;	/** The token obtained when authenticate. */	private String token;	/** The user used to authenticate. */	private String user;	/** The password field for login. */	private JPasswordField passwordField;	/**	 * Launch the application.	 *	 * @param args the arguments	 */	public static void main(String[] args)	{		EventQueue.invokeLater(new Runnable() {			public void run() {				try {					MainWindow window = new MainWindow();					window.frame.setVisible(true);				} catch (Exception e) {					e.printStackTrace();				}			}		});	}	/**	 * Create the application.	 */	public MainWindow() {		initialize();	}	/**	 * Initialize the contents of the frame, shows the logging window and defines 	 * the custom User Interface Defaults.	 **/	public void initialize() {		try {			//initialize colours			UIManager.put("Button.background", new Color(68, 140, 178));//Background			UIManager.put("Button.foreground", new Color(255, 255, 255));			UIManager.put("Label.background", new Color(0, 136, 130));//Background			UIManager.put("background", new Color(255, 255, 255));			UIManager.put("Panel.background", new Color(255, 255, 255));			UIManager.put("Table.background", new Color(232, 249, 255));			UIManager.put("InternalFrame.optionDialogBackground", new Color(255, 255, 255));			UIManager.put("Viewport.background", new Color(255, 255, 255));			UIManager.put("Table.selectionBackground", new Color(165, 218, 237));			UIManager.put("Table.selectionForeground", new Color(86, 86, 86));			UIManager.put("Table.scrollPaneBorder", new Color(255, 255, 255));			UIManager.put("TableHeader.background",new Color(25, 78, 97));			UIManager.put("TableHeader.font",new Font("Arial", Font.PLAIN, 13));			UIManager.put("TableHeader.foreground",new Color(255, 255, 255));			UIManager.put("Table.font",new Font("Arial", Font.PLAIN, 13));			UIManager.put("Table.foreground",new Color(86, 86, 86));			UIManager.put("OptionPane.background",  new Color(255, 255, 255));			UIManager.put("OptionPane.messagebackground",  new Color(255, 255, 255));			UIManager.put("Panel.background", new Color(255, 255, 255));					UIManager.put("Table.sortIconColor", new Color(255, 255, 255));		} catch (Exception e) {			e.printStackTrace();		}		initMainFrame();		ImagePanel logPanel = getLoggingPanel();		frame.getContentPane().setLayout(new GridLayout());		frame.setUndecorated(true);		frame.setResizable(false);		//frame.getRootPane().setDefaultButton(Button);		frame.getContentPane().add(logPanel);	}	/**	 * Gets the logging panel that we use to logging in the application.	 *	 * @return the logging panel	 */	private ImagePanel getLoggingPanel() {		ImagePanel logPanel=new ImagePanel("res\\drawable\\MainWindowBackground.jpg");		GridBagLayout gridBagLayout = new GridBagLayout();		gridBagLayout.columnWeights = new double[]{0.0, 0.1, 0.1, 0.1,0.1};		gridBagLayout.rowWeights = new double[]{0.1, 0.1, 0.1, 0.2,0.1, 0.1};		logPanel.setLayout(gridBagLayout);		JLabel lblUser = new JLabel("User Name:");		lblUser.setForeground(new Color(29, 100, 130));		lblUser.setFont(new Font("Arial", Font.PLAIN, 12));		GridBagConstraints gbc_lblUser = new GridBagConstraints();		gbc_lblUser.anchor = GridBagConstraints.SOUTH;		gbc_lblUser.insets = new Insets(20, 50, 10, 0);		gbc_lblUser.gridx = 0;		gbc_lblUser.gridy = 3;		logPanel.add(lblUser, gbc_lblUser);		userField = new JTextField();		GridBagConstraints gbc_txtUser = new GridBagConstraints();		gbc_txtUser.anchor = GridBagConstraints.SOUTHWEST;		gbc_txtUser.insets = new Insets(20, 0, 10, 100);		gbc_txtUser.gridx = 1;		gbc_txtUser.gridy = 3;		logPanel.add(userField, gbc_txtUser);		userField.setColumns(17);		JLabel lblPassword = new JLabel("Password:");		lblPassword.setFont(new Font("Arial", Font.PLAIN, 12));		lblPassword.setForeground(new Color(29, 100, 130));		GridBagConstraints gbc_lblPassword = new GridBagConstraints();		gbc_lblPassword.anchor = GridBagConstraints.CENTER;		gbc_lblPassword.insets = new Insets(0, 40, 0, 0);		gbc_lblPassword.gridx = 0;		gbc_lblPassword.gridy =4;		logPanel.add(lblPassword, gbc_lblPassword);		passwordField = new JPasswordField();		GridBagConstraints gbc_passwordField = new GridBagConstraints();		gbc_passwordField.anchor = GridBagConstraints.WEST;		gbc_passwordField.insets = new Insets(0, 0, 0, 100);		gbc_lblPassword.anchor = GridBagConstraints.WEST;		gbc_passwordField.gridx = 1;		gbc_passwordField.gridy = 4;		logPanel.add(passwordField, gbc_passwordField);		passwordField.setColumns(17);		Button = new JButton("");				Image img = null;		try {			img = ImageIO.read(new File("res\\drawable\\ico_login.png"));		} catch (IOException e2) {			// TODO Auto-generated catch block			e2.printStackTrace();		}		Button.setIcon(new ImageIcon(img));		Dimension preferredButtonSize=new Dimension(83,23);		Button.setPreferredSize(preferredButtonSize);				GridBagConstraints gbc_btnNewButton = new GridBagConstraints();		gbc_btnNewButton.gridheight = 0;		gbc_btnNewButton.gridwidth = 1;		gbc_btnNewButton.anchor = GridBagConstraints.NORTH;		gbc_btnNewButton.insets = new Insets(0, 0, 20, 15);		gbc_btnNewButton.gridx = 1;		gbc_btnNewButton.gridy = 5;		logPanel.add(Button, gbc_btnNewButton);		Button.addFocusListener(new FocusListener(){			@Override			public void focusGained(FocusEvent arg0) {				setConnectMsg("Connecting...");				connectingLabel.setVisible(true);				Button.setFocusable(false);			}			@Override			public void focusLost(FocusEvent arg0) {				Button.setFocusable(true);			}});		Button.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				setConnectMsg("Connecting...");				connectingLabel.setVisible(true);				try {					if(startAuthentication(userField.getText(), passwordField.getText())){						frame.setVisible(false);						setConnectMsg("Connected");						if(isLastVersion()){							getProjectWindow();						}else{							getLastVersionWindow();						}					}else {						connectingLabel.setVisible(false);					}				} catch (HeadlessException | IOException e1) {					// TODO Auto-generated catch block					e1.printStackTrace();				}			}		});		JButton buttonClose = new JButton("");				img = null;		try {			img = ImageIO.read(new File("res\\drawable\\ico_close.jpg"));		} catch (IOException e2) {			// TODO Auto-generated catch block			e2.printStackTrace();		}		buttonClose.setIcon(new ImageIcon(img));						buttonClose.setPreferredSize(preferredButtonSize);		GridBagConstraints gbc_buttonClose= new GridBagConstraints();		gbc_buttonClose.anchor = GridBagConstraints.NORTHEAST;		gbc_buttonClose.gridheight = 0;		gbc_buttonClose.gridwidth = 1;		gbc_buttonClose.insets = new Insets(0, 60, 20, 0);		gbc_buttonClose.gridx = 0;		gbc_buttonClose.gridy = 5;		logPanel.add(buttonClose, gbc_buttonClose);		buttonClose.addActionListener(new ActionListener(){			@Override			public void actionPerformed(ActionEvent e) {				frame.dispose();			}});		connectingLabel = new JLabel(connectMsg);		connectingLabel.setVisible(false);		GridBagConstraints gbc_connectingLabel = new GridBagConstraints();		gbc_connectingLabel.gridx = 1;		gbc_connectingLabel.gridy = 5;		gbc_connectingLabel.anchor = GridBagConstraints.NORTHWEST;		gbc_connectingLabel.insets = new Insets(3, 17, 0, 0);		logPanel.add(connectingLabel, gbc_connectingLabel);		JLabel versionLabel = new JLabel("AllSeen Test Tool Local Agent "+version);		versionLabel.setFont(new Font("Arial", Font.PLAIN, 11));		versionLabel.setForeground(new Color(79, 80, 80));		GridBagConstraints gbc_versionLabel = new GridBagConstraints();		gbc_versionLabel.anchor = GridBagConstraints.NORTH;		gbc_versionLabel.insets = new Insets(20, 0, 0, 0);		gbc_versionLabel.gridx = 4;		gbc_versionLabel.gridy = 5;		logPanel.add(versionLabel,gbc_versionLabel);		JLabel poweredLabel = new JLabel("Powered by AT4 wireless");		poweredLabel.setFont(new Font("Arial", Font.PLAIN, 11));		poweredLabel.setForeground(new Color(79, 80, 80));		GridBagConstraints gbc_poweredLabel = new GridBagConstraints();		gbc_poweredLabel.insets = new Insets(10, 0, 0, 0);		gbc_poweredLabel.anchor = GridBagConstraints.CENTER;		gbc_poweredLabel.gridx = 4;		gbc_poweredLabel.gridy = 5;		logPanel.add(poweredLabel,gbc_poweredLabel);		return logPanel;	}	/**	 * Gets the last version window.	 *	 * @return the last version window	 */	protected void getLastVersionWindow() {		InstallLastVersionWindow installWindow=new InstallLastVersionWindow(this,token,version);		installWindow.setModalityType(JDialog.DEFAULT_MODALITY_TYPE.APPLICATION_MODAL);		installWindow.setVisible(true);		}	/**	 * Checks if is last version.	 *	 * @return true, if is last version	 */	protected boolean isLastVersion() {		boolean isLast = false;		String test="";		String link=getConfigValue("TestToolWebAppUrl")   				+ getConfigValue("isLastVersion");		try{			URI URI = new URI(link+version.replace(".", "_").substring(1));			HttpClient httpClient = HttpClientBuilder.create().build();			HttpGet postRequest = new HttpGet(URI);			postRequest.addHeader("Authorization", "bearer "+token);			HttpResponse response = httpClient.execute(postRequest);			HttpEntity entity = response.getEntity();			BufferedReader br = new BufferedReader(new InputStreamReader(					(entity.getContent())));			String output;			while ((output = br.readLine()) != null) {				test=test+output;				if(output.equals("new version available")){					isLast = false;				}else if(output.equals("version up to date")){					isLast = true;				}			}		}catch(IOException e1){			JOptionPane.showMessageDialog(null, "Fail in the communication with the Test Tool Web Server"					);		} catch (URISyntaxException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		return isLast;	}	/**	 * Sets the connect msg.	 *	 * @param msg the new connect msg	 */	public void setConnectMsg(String msg) {		connectMsg=msg;		connectingLabel.setText(connectMsg);		connectingLabel.setVisible(true);	}	/**	 * Inits the main frame.	 */	private void initMainFrame() {		Rectangle bounds = null ;		if(frame!=null){			bounds = frame.getBounds();			frame.dispose();		}		Dialog parent = null;		frame = new JDialog( parent);		frame.dispose();		if(bounds==null||bounds.getWidth()<100||bounds.getHeight()<100){			Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();			int width=700;			int height=300;			bounds = new Rectangle((int) (dim.width/2)-width/2, 					(int) (dim.height/2)-height/2,					width, 					height);		}		frame.setBounds(bounds);		frame.setPreferredSize(new Dimension(700, Toolkit.getDefaultToolkit().getScreenSize().height));		Image imageVoid = null;		Image imageAllSeen= null;		imageVoid = new BufferedImage(8, 8, BufferedImage.TYPE_INT_ARGB_PRE);		try {			imageAllSeen = ImageIO.read(new File("res\\drawable\\ic_AllSeen.png"));		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		List<Image> images = new ArrayList<Image>();		images.add(imageVoid);		images.add(imageAllSeen);		frame.setIconImages(images);	}	/**	 * Gets the header panel.	 *	 * @return the header panel	 */	protected ImagePanel getHeaderPanel() {		return  new ImagePanel("res\\drawable\\header.jpg");	}	/**	 * Gets the project window.	 *	 * @return the project window	 */	protected void getProjectWindow() {		frame.dispose();		frame.setVisible(false);			Rectangle bounds = null ;		Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();		int width=1000;		int height=500;		bounds = new Rectangle((int) (dim.width/2)-width/2, 				(int) (dim.height/2)-height/2,				width, 				height);		frame.setBounds(bounds);		initMainFrame();		frame.setPreferredSize(new Dimension(700, Toolkit.getDefaultToolkit().getScreenSize().height));		frame.setResizable(false);		ProjectWindow ProjectPanel = null;		try {			ProjectPanel = new ProjectWindow(this,user, token);		} catch (SAXException | IOException | ParserConfigurationException e1) {			// TODO Auto-generated catch block			e1.printStackTrace();			JOptionPane.showMessageDialog(null, "Fail in the communication with the Test Tool Web Server"					);		}		frame.getContentPane().add(ProjectPanel,BorderLayout.CENTER);		Button = new JButton("");		Dimension preferredButtonSize=new Dimension(76,24);		Button.setPreferredSize(preferredButtonSize);				Image img = null;		try {			img = ImageIO.read(new File("res\\drawable\\ico_next.png"));		} catch (IOException e2) {			// TODO Auto-generated catch block			e2.printStackTrace();		}		Button.setIcon(new ImageIcon(img));		final ProjectWindow listener=ProjectPanel;		Button.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				try{					int id=listener.getProjectId();					frame.setVisible(false);					getTestCasesWindow(id, listener.getVersion());				}catch(IndexOutOfBoundsException ex){					JOptionPane.showMessageDialog(frame, "Select a configured project");				}catch(FileNotFoundException ex){					JOptionPane.showMessageDialog(null, "Fail in the communication with the Test Tool Web Server"							);}			}});		GridBagConstraints gbc_btnNewButton = new GridBagConstraints();		gbc_btnNewButton.insets = new Insets(0, 0, 5, 0);		gbc_btnNewButton.gridx = 1;		gbc_btnNewButton.gridy = 0;		JButton refreshButton=new JButton("");		try {			img = ImageIO.read(new File("res\\drawable\\ico_refresh.png"));		} catch (IOException e2) {			// TODO Auto-generated catch block			e2.printStackTrace();		}		refreshButton.setIcon(new ImageIcon(img));				Dimension preferredSize=new Dimension(103,24);		refreshButton.setPreferredSize(preferredSize);		refreshButton.addActionListener(new ActionListener(){			@Override			public void actionPerformed(ActionEvent e) {				getProjectWindow();			}});		ImagePanel footer=new ImagePanel("res\\drawable\\short_footer.jpg");		GridBagLayout gridBagLayout = new GridBagLayout();		gridBagLayout.columnWeights = new double[]{0.5, 0.5, 0.5};		gridBagLayout.rowWeights = new double[]{0.9};		footer.setLayout(gridBagLayout);		GridBagConstraints gbc_refreshButton = new GridBagConstraints();		gbc_refreshButton.insets = new Insets(20, 0, 20, 0);		gbc_refreshButton.gridx = 0;		gbc_refreshButton.gridy = 0;		gbc_refreshButton.fill=GridBagConstraints.NONE;				footer.add(refreshButton, gbc_refreshButton);		connectingLabel = new JLabel(connectMsg);		connectingLabel.setVisible(false);		GridBagConstraints gbc_connectingLabel = new GridBagConstraints();		gbc_connectingLabel.gridx = 1;		gbc_connectingLabel.gridy = 0;		gbc_connectingLabel.insets =new Insets(20, 0, 20, 0);		footer.add(connectingLabel, gbc_connectingLabel);		GridBagConstraints gbc_Button = new GridBagConstraints();		gbc_Button.insets = new Insets(20, 0, 20, 0);		gbc_Button.gridx = 2;		gbc_Button.gridy = 0;				footer.add(Button, gbc_Button);		//frame.getRootPane().setDefaultButton(Button);		frame.getContentPane().add(footer, BorderLayout.SOUTH);		frame.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);		frame.addWindowListener(new WindowAdapter(){			public void windowClosing(WindowEvent e) {				System.exit(0);			}		});		frame.setVisible(true);	}	/**	 * Gets the test cases window.	 *	 * @param row the row of the project to download from web	 * @param version the Technology version	 * 	 */	protected void getTestCasesWindow(int projectId, String version) {		frame.dispose();		initMainFrame();		frame.setVisible(false);		frame.setResizable(false);		if(isAvailableVersion(version)){			if(isLastReleaseVersion(version)){			try {				testCasesPanel=null;				testCasesPanel =new TestCasesWindow(this,projectId,version,user,token);				ImagePanel buttons=new ImagePanel("res//drawable//footer.jpg");				GridBagLayout gridBagLayout = new GridBagLayout();				gridBagLayout.columnWeights = new double[]{0.5, 0.5};				gridBagLayout.rowWeights = new double[]{0.9};				buttons.setLayout(gridBagLayout);				JButton runAllButton = new JButton("");								Image img = null;				try {					img = ImageIO.read(new File("res\\drawable\\run_all.jpg"));				} catch (IOException e2) {					// TODO Auto-generated catch block					e2.printStackTrace();				}				runAllButton.setIcon(new ImageIcon(img));								Dimension preferredSize=new Dimension(83,23);				runAllButton.setPreferredSize(preferredSize);				runAllButton.addActionListener(new ActionListener() {					@Override					public void actionPerformed(ActionEvent arg0) {						testCasesPanel.runAllTestCases();					}});				JButton endButton = new JButton("");								Image img2 = null;				try {					img2 = ImageIO.read(new File("res\\drawable\\back.jpg"));				} catch (IOException e2) {					// TODO Auto-generated catch block					e2.printStackTrace();				}				endButton.setIcon(new ImageIcon(img2));								Dimension preferredEndSize=new Dimension(83,23);				endButton.setPreferredSize(preferredEndSize);				endButton.addActionListener(new ActionListener() {					public void actionPerformed(ActionEvent e) {						frame.dispose();						getProjectWindow();					}});				GridBagConstraints gbc_endButton = new GridBagConstraints();				gbc_endButton.insets = new Insets(20, 0, 20, 0);				gbc_endButton.gridx = 0;				gbc_endButton.gridy = 0;				buttons.add(endButton, gbc_endButton);				GridBagConstraints gbc_runAllButton = new GridBagConstraints();				gbc_runAllButton.insets = new Insets(20, 0, 20, 0);				gbc_runAllButton.gridx = 1;				gbc_runAllButton.gridy = 0;				buttons.add(runAllButton, gbc_runAllButton);				frame.getContentPane().add(testCasesPanel,BorderLayout.CENTER);				frame.getContentPane().add(buttons,BorderLayout.SOUTH);			} catch (SAXException | IOException | ParserConfigurationException e) {				// TODO Auto-generated catch block				e.printStackTrace();			} 			frame.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);			frame.addWindowListener(new WindowAdapter(){				public void windowClosing(WindowEvent e) {					System.exit(0);				}			});			frame.setVisible(true);			}else{				installLastVersionTestcasesPackage(version);								getTestCasesWindow(projectId,version);							}		}else{			InstallTestToolWindow installWindow=new InstallTestToolWindow(this,token,version,projectId);			installWindow.setModalityType(JDialog.DEFAULT_MODALITY_TYPE.APPLICATION_MODAL);			installWindow.setVisible(true);		}	}	private void installLastVersionTestcasesPackage(String ver) {		int releaseVersion=getLastReleaseVersion(ver);				String url=getConfigValue("TestToolWebAppUrl")+				getConfigValue("GetTechnology")				+ver.replace(".", "_")				+"_R"+releaseVersion;		//System.out.println(url);		try{			URI URI = new URI(url);			FileOutputStream fos = null;			HttpClient httpClient = HttpClientBuilder.create().build();			HttpGet postRequest = new HttpGet(URI);			postRequest.addHeader("Authorization", "bearer "+token);			HttpResponse response = httpClient.execute(postRequest);			HttpEntity entity = response.getEntity();			//System.out.println("Entity:"+entity);			BufferedHttpEntity buf = new BufferedHttpEntity(entity);			String output;			try{								fos = new FileOutputStream(getConfigValue("TestCasesPackagePath")+"TestCases_Package_"+ver+"_R"+releaseVersion+".jar");			} catch (FileNotFoundException e) {				File dir=new File(getConfigValue("TestCasesPackagePath"));				if(dir.mkdirs()){					fos = new FileOutputStream(getConfigValue("TestCasesPackagePath")+"TestCases_Package_"+ver+"_R"+releaseVersion+".jar");				}			}			buf.writeTo(fos);		}catch(IOException e1){			JOptionPane.showMessageDialog(null, "Fail in the communication with the Test Tool Web Server"					);		} catch (URISyntaxException e) {			e.printStackTrace();		}		InputStream inputStream = null;		String path = (new File("")).getAbsolutePath();		String inputFile = "jar:file:/"+path+"/"+getConfigValue("TestCasesPackagePath")+"TestCases_Package_"+ver+"_R"+releaseVersion+".jar!/alljoyn_java.dll";		//System.out.println(inputFile);				String libPath=path+File.separator+"lib"+File.separator+ver+File.separator;		//System.out.println(libPath);		File dir=new File(libPath);		dir.mkdirs();							URL inputURL = null;			try {				inputURL = new URL(inputFile);				JarURLConnection conn = (JarURLConnection)inputURL.openConnection();				inputStream = conn.getInputStream();			} catch (MalformedURLException e1) {				e1.printStackTrace();				System.err.println("Malformed input URL: "+inputURL);				return;			} catch (IOException e1) {				e1.printStackTrace();				System.err.println("IO error open connection");				return;			}		 						// write the inputStream to a FileOutputStream				FileOutputStream outputStream = null;				try {										outputStream = new FileOutputStream(new File(path+File.separator+"lib"+File.separator+ver+File.separator+"alljoyn_java.dll"));				} catch (FileNotFoundException e) {					// TODO Auto-generated catch block					e.printStackTrace();									}		 				int read = 0;				byte[] bytes = new byte[1024];		 try{				while ((read = inputStream.read(bytes)) != -1) {					outputStream.write(bytes, 0, read);				}								} catch (IOException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}				try {					outputStream.close();				} catch (IOException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}					}				int getLastReleaseVersion(String TestCasesVersion) {		int lastVersion=0;				String url=getConfigValue("TestToolWebAppUrl")   				+ getConfigValue("isLastTechnologyVersionUrl");				 url=url+"/"+TestCasesVersion.replace(".", "_")+"_R0";														String res="";		URI URI;		try {			URI = new URI(url);				HttpClient httpClient = HttpClientBuilder.create().build();		HttpGet postRequest = new HttpGet(URI);		postRequest.addHeader("Authorization", "bearer "+token);		HttpResponse response = httpClient.execute(postRequest);		HttpEntity entity = response.getEntity();		BufferedReader br = new BufferedReader(new InputStreamReader(				(entity.getContent())));		String output;		while ((output = br.readLine()) != null) {			res=res+output;					}		//System.out.println(res);						lastVersion=Integer.parseInt(res.split("R")[1]);		} catch (URISyntaxException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (ClientProtocolException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}				//System.out.println("LAST VERSION: "+lastVersion);		return lastVersion;	}	private boolean isLastReleaseVersion(String TestCasesVersion) {		Boolean isLastVersion=true;		int releaseVersion=getTestcasesPackageReleaseVersion(TestCasesVersion);				String url=getConfigValue("TestToolWebAppUrl")   				+ getConfigValue("isLastTechnologyVersionUrl");						url=url+"/"+TestCasesVersion.replace(".", "_")+"_R"+releaseVersion;				//System.out.println("URL!!"+url);						String res="";		URI URI;		try {			URI = new URI(url);				HttpClient httpClient = HttpClientBuilder.create().build();		HttpGet postRequest = new HttpGet(URI);		postRequest.addHeader("Authorization", "bearer "+token);		HttpResponse response = httpClient.execute(postRequest);		HttpEntity entity = response.getEntity();		BufferedReader br = new BufferedReader(new InputStreamReader(				(entity.getContent())));		String output;		while ((output = br.readLine()) != null) {			res=res+output;					}		//System.out.println(res);		if(res.contains("true")){			isLastVersion=true;					}else{			isLastVersion=false;					}						} catch (URISyntaxException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (ClientProtocolException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}						return isLastVersion;	}	/**	 * Checks if TestCases_Package_version is available to use.	 *	 * @param version the version	 * @return true, if is available version	 */	private boolean isAvailableVersion(String version) {		Boolean isAvailable=true;		Class localAgent = null;		int releaseVersion=getTestcasesPackageReleaseVersion(version);				String path=getConfigValue("TestCasesPackagePath")+				"TestCases_Package_"+version+				"_R"+releaseVersion+				".jar";		//System.out.println(path);		File file = new File(path);		try {			URL url = file.toURL();         			URL[] urls = new URL[]{url};			ClassLoader cl = new URLClassLoader(urls);			localAgent = cl.loadClass("com.at4wireless.alljoyn.Manager");		} catch (MalformedURLException e) {			//System.out.println("Malformed URL");		} catch (ClassNotFoundException e) {			//System.out.println("Class not found");			isAvailable=false;		}		return isAvailable;	}	public int getTestcasesPackageReleaseVersion(String TestCasesVersion) {		int releaseVersion=0;		File folder=new File(getConfigValue("TestCasesPackagePath"));		for (final File fileEntry : folder.listFiles()) {	       String fileName=fileEntry.getName();	            //System.out.println("Paquete: "+fileName);	            if(fileName.contains(TestCasesVersion)){	           String[] verjar = fileName.split("_R");	         String[] versions = verjar[1].split("\\.");	          //System.out.println("versions: "	      //  +versions[0]	        	        //		 );	          String intv=versions[0];	          int ver= Integer.parseInt(intv);	         if(ver>releaseVersion){	        	  releaseVersion=ver;	          }	    }									}		return releaseVersion;			}	/**	 * Start authentication with the web server.	 *	 * @param user the user to login	 * @param pass the pass to login	 * @return true, if successful login	 * @throws IOException Signals that an I/O exception has occurred.	 */	boolean startAuthentication(String user, String pass) throws IOException{		boolean auth = false;		this.user=user;		String url=getConfigValue("TestToolWebAppUrl")   				+ getConfigValue("AuthenticateUrl");						      MessageDigest m = null;			try {				m = MessageDigest.getInstance("SHA-256");			} catch (NoSuchAlgorithmException e1) {				// TODO Auto-generated catch block				e1.printStackTrace();			}				       m.update(pass.getBytes(),0,pass.length());				     byte[] hashBytes = m.digest();		      		     		     String hashPass=convertByteArrayToHexString(hashBytes);		HttpHeaders header = null;		ClientConfig config = new DefaultClientConfig();		Client client = Client.create(config);		URI uri = UriBuilder.fromUri(url).build();		Form form = new Form();		form.add("username", user);		form.add("password", hashPass);		form.add("client_id", "restapp");		form.add("client_secret","restapp");		form.add("grant_type", "password");		ClientResponse response = null;		WebResource authService = client.resource(uri);		try{			response = authService.type(MediaType.APPLICATION_FORM_URLENCODED_TYPE).post(ClientResponse.class, form);			String respuesta = response.getEntity(String.class);  			String token = respuesta.split("\"")[3];			if(response.getStatus()==200){				auth=true;			}else{				JOptionPane.showMessageDialog(frame, "Incorrect User and Password");			}			this.user=user;			this.token=token;		}catch(ClientHandlerException e){			JOptionPane.showMessageDialog(null, "Fail in the communication with the Test Tool Web Server"					);		}		return auth;	}	/**	 * Gets the configuration value from config.xml.	 *	 * @param key the key to obtain	 * @return the configuration value	 */	private String getConfigValue(String key) {		String value="";		File test = new File("config.xml");		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();		DocumentBuilder dBuilder = null;		try {			dBuilder = dbFactory.newDocumentBuilder();		} catch (ParserConfigurationException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		Document doc = null;		try {			doc = dBuilder.parse(test);		} catch (SAXException | IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		NodeList projects = doc.getElementsByTagName("Configuration");		Node node = projects.item(0);		Element element = (Element) node;		value=getValue(key, element);		return value;	}	/**	 * Gets the value from the selected tag. 	 *	 * @param tag the tag	 * @param element the element	 * @return the value	 */	private static String getValue(String tag, Element element) {		NodeList nodes = element.getElementsByTagName(tag).item(0).getChildNodes();		Node node = (Node) nodes.item(0);		return node.getNodeValue();	}	/**	 * Gets the results windows.	 *	 * @param projectId the project id	 * 	 */	public void getResultsWindows(int projectId) {		setConnectMsg("Connecting...");		frame.setEnabled(false);		frame.setResizable(false);		ResultWindow resultWindow=new ResultWindow(this,projectId,user,token);		resultWindow.setModalityType(JDialog.DEFAULT_MODALITY_TYPE.APPLICATION_MODAL);		resultWindow.setVisible(true);		resultWindow.setAlwaysOnTop(true);		setConnectMsg("Connected");	}	/**	 * Convert byte array to hex string.	 *	 * @param arrayBytes the array bytes	 * @return the string that contains the hash	 */	private String convertByteArrayToHexString(byte[] arrayBytes) {		StringBuffer stringBuffer = new StringBuffer();		for (int i = 0; i < arrayBytes.length; i++) {			stringBuffer.append(Integer.toString((arrayBytes[i] & 0xff) + 0x100, 16)					.substring(1));		}		return stringBuffer.toString();	}}