/******************************************************************************* *  Copyright AllSeen Alliance. All rights reserved. * *     Permission to use, copy, modify, and/or distribute this software for any *     purpose with or without fee is hereby granted, provided that the above *     copyright notice and this permission notice appear in all copies. * *     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES *     WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF *     MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR *     ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES *     WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN *     ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF *     OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. *******************************************************************************/package com.at4wireless.alljoyn.localagent;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dialog;import java.awt.Dialog.ModalityType;import java.awt.Dimension;import java.awt.EventQueue;import java.awt.Font;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.GridLayout;import java.awt.HeadlessException;import java.awt.Image;import java.awt.Insets;import java.awt.Rectangle;import java.awt.Toolkit;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.FocusEvent;import java.awt.event.FocusListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.FilenameFilter;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.JarURLConnection;import java.net.MalformedURLException;import java.net.URI;import java.net.URISyntaxException;import java.net.URL;import java.security.GeneralSecurityException;import java.security.KeyFactory;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.security.spec.X509EncodedKeySpec;import java.util.ArrayList;import java.util.List;import javax.crypto.SecretKey;import javax.imageio.ImageIO;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JDialog;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPasswordField;import javax.swing.JTextField;import javax.swing.UIManager;import javax.ws.rs.core.MediaType;import javax.ws.rs.core.UriBuilder;import javax.xml.bind.DatatypeConverter;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.entity.BufferedHttpEntity;import org.apache.http.entity.mime.MultipartEntityBuilder;import org.apache.http.impl.client.HttpClientBuilder;import org.apache.log4j.Level;import org.apache.log4j.Logger;import org.w3c.dom.Document;import org.w3c.dom.Element;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import org.xml.sax.SAXException;import com.sun.jersey.api.client.Client;import com.sun.jersey.api.client.ClientHandlerException;import com.sun.jersey.api.client.ClientResponse;import com.sun.jersey.api.client.WebResource;import com.sun.jersey.api.client.config.ClientConfig;import com.sun.jersey.api.client.config.DefaultClientConfig;import com.sun.jersey.api.representation.Form;public class MainWindow{	private static final String CTT_LOCAL_AGENT_VERSION = "v1.5.0";	private static final String TAG = "MainWindow";	private static final Logger logger = Logger.getLogger(TAG);	private static final int LOGIN_PANEL_WIDTH = 700;	private static final int LOGIN_PANEL_HEIGHT = 300;	private static final int PROJECT_WINDOW_WIDTH = 1000;	private static final int PROJECT_WINDOW_HEIGHT = 500;	private static final String RESOURCES_PATH = "res"+File.separator+"drawable";	private static final String ICON_NAME = "ic_AllSeen.png";	private static final String LOGIN_BUTTON = "ico_login.png";	private static final String CLOSE_BUTTON = "ico_close.jpg";	private static final String NEXT_BUTTON = "ico_next.png";	private static final String REFRESH_BUTTON = "ico_refresh.png";	private static final String RUNALL_BUTTON = "run_all.jpg";	private static final String BACK_BUTTON = "back.jpg";	private static final String LOGIN_BACKGROUND = "MainWindowBackground.jpg";	private static final String HEADER = "header.jpg";	private static final String SHORT_FOOTER = "short_footer.jpg";	private static final String FOOTER = "footer.jpg";	private static final String USER_LABEL = "User Name:";	private static final String PASSWORD_LABEL = "Password:";	private static final String VERSION_LABEL = "AllSeen Test Tool Local Agent " + CTT_LOCAL_AGENT_VERSION;	private static final String POWERED_BY_LABEL = "Powered by AT4 wireless";	private static final String configurationFileName = "config.xml";		private static JDialog MAIN_FRAME;		private JLabel connectingLabel;	private String connectingMessage = "Connecting...";	private String authenticatedUser;	private String sessionToken;	private SecretKey cipherKey;	public static void main(String[] args)	{		EventQueue.invokeLater(new Runnable()		{			public void run()			{				new MainWindow();				MainWindow.MAIN_FRAME.setVisible(true);			}		});	}		public MainWindow()	{		initialize();	}		/**	 * Initializes the contents of the frame, shows the login window and defines 	 * the custom User Interface Defaults.	 **/	public void initialize()	{		MainWindow.logger.setLevel(Level.toLevel(getConfigValue("logLevel")));				logger.info("Initializing...");				setApplicationColors();		initMainFrame();		ImagePanel loginPanel = buildLoginPanel();		MAIN_FRAME.getContentPane().setLayout(new GridLayout());		MAIN_FRAME.setUndecorated(true);		MAIN_FRAME.setResizable(false);		//frame.getRootPane().setDefaultButton(Button);		MAIN_FRAME.getContentPane().add(loginPanel);	}		private void setApplicationColors()	{		UIManager.put("Button.background", new Color(68, 140, 178));		UIManager.put("Button.foreground", new Color(255, 255, 255));		UIManager.put("Label.background", new Color(0, 136, 130));		UIManager.put("background", new Color(255, 255, 255));		UIManager.put("Panel.background", new Color(255, 255, 255));		UIManager.put("Table.background", new Color(232, 249, 255));		UIManager.put("InternalFrame.optionDialogBackground", new Color(255, 255, 255));		UIManager.put("Viewport.background", new Color(255, 255, 255));		UIManager.put("Table.selectionBackground", new Color(165, 218, 237));		UIManager.put("Table.selectionForeground", new Color(86, 86, 86));		UIManager.put("Table.scrollPaneBorder", new Color(255, 255, 255));		UIManager.put("TableHeader.background",new Color(25, 78, 97));		UIManager.put("TableHeader.font",new Font("Arial", Font.PLAIN, 13));		UIManager.put("TableHeader.foreground",new Color(255, 255, 255));		UIManager.put("Table.font",new Font("Arial", Font.PLAIN, 13));		UIManager.put("Table.foreground",new Color(86, 86, 86));		UIManager.put("OptionPane.background",  new Color(255, 255, 255));		UIManager.put("OptionPane.messagebackground",  new Color(255, 255, 255));		UIManager.put("Panel.background", new Color(255, 255, 255));				UIManager.put("Table.sortIconColor", new Color(255, 255, 255));	}		private void initMainFrame()	{		Rectangle bounds = null;		Dialog parent = null;		if (MAIN_FRAME != null)		{			bounds = MAIN_FRAME.getBounds();			MAIN_FRAME.dispose();		}		MAIN_FRAME = new JDialog(parent);		MAIN_FRAME.dispose();		if (bounds == null || bounds.getWidth() < 100 || bounds.getHeight() < 100)		{			bounds = setCenteredRectangle(LOGIN_PANEL_WIDTH, LOGIN_PANEL_HEIGHT);		}				MAIN_FRAME.setBounds(bounds);		//MAIN_FRAME.setPreferredSize(new Dimension(700, Toolkit.getDefaultToolkit().getScreenSize().height));		List<Image> images = new ArrayList<Image>();		images.add(readImageFromFile(RESOURCES_PATH, ICON_NAME));		MAIN_FRAME.setIconImages(images);	}		private Rectangle setCenteredRectangle(int rectangleWidth, int rectangleHeight)	{		Dimension screenDimensions = Toolkit.getDefaultToolkit().getScreenSize();		int xCenter = (screenDimensions.width - rectangleWidth)/2;		int yCenter = (screenDimensions.height - rectangleHeight)/2;		return new Rectangle(xCenter, yCenter, rectangleWidth, rectangleHeight);	}		private Image readImageFromFile(String imagePath, String imageName)	{		Image image = null;				try		{			image = ImageIO.read(new File(imagePath + File.separator + imageName));		}		catch (IOException e)		{			logger.error("Resource '" + imageName + "' not found");		}				return image;	}	private ImagePanel buildLoginPanel()	{		ImagePanel loginPanel = new ImagePanel(RESOURCES_PATH+File.separator+LOGIN_BACKGROUND);		setPanelLayout(loginPanel);		JTextField userField = setUserInputField(loginPanel);		JPasswordField passwordField = setPasswordInputField(loginPanel);		setLoginButton(loginPanel, userField, passwordField);		setCloseButton(loginPanel);		setLabels(loginPanel);		return loginPanel;	}		private void setPanelLayout(ImagePanel logPanel)	{		GridBagLayout gridBagLayout = new GridBagLayout();		gridBagLayout.columnWeights = new double[]{0.0, 0.1, 0.1, 0.1, 0.1};		gridBagLayout.rowWeights = new double[]{0.1, 0.1, 0.1, 0.2, 0.1, 0.1};		logPanel.setLayout(gridBagLayout);	}		private JTextField setUserInputField(ImagePanel logPanel)	{		JLabel lblUser = new JLabel(USER_LABEL);		lblUser.setForeground(new Color(29, 100, 130));		lblUser.setFont(new Font("Arial", Font.PLAIN, 12));		GridBagConstraints gbc_lblUser = new GridBagConstraints();		gbc_lblUser.anchor = GridBagConstraints.SOUTH;		gbc_lblUser.insets = new Insets(20, 50, 10, 0);		gbc_lblUser.gridx = 0;		gbc_lblUser.gridy = 3;		logPanel.add(lblUser, gbc_lblUser);		JTextField userField = new JTextField();		GridBagConstraints gbc_txtUser = new GridBagConstraints();		gbc_txtUser.anchor = GridBagConstraints.SOUTHWEST;		gbc_txtUser.insets = new Insets(20, 0, 10, 100);		gbc_txtUser.gridx = 1;		gbc_txtUser.gridy = 3;		logPanel.add(userField, gbc_txtUser);		userField.setColumns(17);				return userField;	}		private JPasswordField setPasswordInputField(ImagePanel logPanel)	{		JLabel lblPassword = new JLabel(PASSWORD_LABEL);		lblPassword.setFont(new Font("Arial", Font.PLAIN, 12));		lblPassword.setForeground(new Color(29, 100, 130));		GridBagConstraints gbc_lblPassword = new GridBagConstraints();		gbc_lblPassword.anchor = GridBagConstraints.CENTER;		gbc_lblPassword.insets = new Insets(0, 40, 0, 0);		gbc_lblPassword.gridx = 0;		gbc_lblPassword.gridy = 4;		logPanel.add(lblPassword, gbc_lblPassword);		JPasswordField passwordField = new JPasswordField();		GridBagConstraints gbc_passwordField = new GridBagConstraints();		gbc_passwordField.anchor = GridBagConstraints.WEST;		gbc_passwordField.insets = new Insets(0, 0, 0, 100);		gbc_lblPassword.anchor = GridBagConstraints.WEST;		gbc_passwordField.gridx = 1;		gbc_passwordField.gridy = 4;		logPanel.add(passwordField, gbc_passwordField);		passwordField.setColumns(17);				return passwordField;	}		private void setLoginButton(ImagePanel logPanel, JTextField userField, JPasswordField passwordField)	{		JButton loginButton = new JButton("");		loginButton.setIcon(new ImageIcon(readImageFromFile(RESOURCES_PATH, LOGIN_BUTTON)));		Dimension preferredButtonSize = new Dimension(83, 23);		loginButton.setPreferredSize(preferredButtonSize);		GridBagConstraints gbc_btnNewButton = new GridBagConstraints();		gbc_btnNewButton.gridheight = 0;		gbc_btnNewButton.gridwidth = 1;		gbc_btnNewButton.anchor = GridBagConstraints.NORTH;		gbc_btnNewButton.insets = new Insets(0, 0, 20, 15);		gbc_btnNewButton.gridx = 1;		gbc_btnNewButton.gridy = 5;		logPanel.add(loginButton, gbc_btnNewButton);		loginButton.addFocusListener(new FocusListener()		{			@Override			public void focusGained(FocusEvent arg0)			{				setConnectMsg("Connecting...");				connectingLabel.setVisible(true);				loginButton.setFocusable(false);			}			@Override			public void focusLost(FocusEvent arg0)			{				loginButton.setFocusable(true);			}		});				loginButton.addActionListener(new ActionListener()		{			@SuppressWarnings("deprecation")			public void actionPerformed(ActionEvent e)			{				setConnectMsg("Connecting...");				connectingLabel.setVisible(true);				try				{					if (startAuthentication(userField.getText(), passwordField.getText()))					{						MAIN_FRAME.setVisible(false);						exchangeEncryption();						setConnectMsg("Connected");						List<Object> list = isLastVersion();												if ((Boolean) list.get(0))						{							getProjectWindow();						}						else						{							getLastVersionWindow((String) list.get(1));						}					}					else					{						connectingLabel.setVisible(false);					}				}				catch (HeadlessException e1)				{					logger.error("Not possible to obtain last version");					e1.printStackTrace();				}			}		});	}		private void setCloseButton(ImagePanel logPanel)	{		JButton buttonClose = new JButton("");		buttonClose.setIcon(new ImageIcon(readImageFromFile(RESOURCES_PATH, CLOSE_BUTTON)));		Dimension preferredButtonSize = new Dimension(83,23);		buttonClose.setPreferredSize(preferredButtonSize);		GridBagConstraints gbc_buttonClose = new GridBagConstraints();		gbc_buttonClose.anchor = GridBagConstraints.NORTHEAST;		gbc_buttonClose.gridheight = 0;		gbc_buttonClose.gridwidth = 1;		gbc_buttonClose.insets = new Insets(0, 60, 20, 0);		gbc_buttonClose.gridx = 0;		gbc_buttonClose.gridy = 5;		logPanel.add(buttonClose, gbc_buttonClose);		buttonClose.addActionListener(new ActionListener()		{			@Override			public void actionPerformed(ActionEvent e)			{				MAIN_FRAME.dispose();			}		});	}		private void setLabels(ImagePanel logPanel)	{		connectingLabel = new JLabel(connectingMessage);		connectingLabel.setVisible(false);		GridBagConstraints gbc_connectingLabel = new GridBagConstraints();		gbc_connectingLabel.gridx = 1;		gbc_connectingLabel.gridy = 5;		gbc_connectingLabel.anchor = GridBagConstraints.NORTHWEST;		gbc_connectingLabel.insets = new Insets(3, 17, 0, 0);		logPanel.add(connectingLabel, gbc_connectingLabel);		JLabel versionLabel = new JLabel(VERSION_LABEL);		versionLabel.setFont(new Font("Arial", Font.PLAIN, 11));		versionLabel.setForeground(new Color(79, 80, 80));		GridBagConstraints gbc_versionLabel = new GridBagConstraints();		gbc_versionLabel.anchor = GridBagConstraints.NORTH;		gbc_versionLabel.insets = new Insets(20, 0, 0, 0);		gbc_versionLabel.gridx = 4;		gbc_versionLabel.gridy = 5;		logPanel.add(versionLabel, gbc_versionLabel);		JLabel poweredLabel = new JLabel(POWERED_BY_LABEL);		poweredLabel.setFont(new Font("Arial", Font.PLAIN, 11));		poweredLabel.setForeground(new Color(79, 80, 80));		GridBagConstraints gbc_poweredLabel = new GridBagConstraints();		gbc_poweredLabel.insets = new Insets(10, 0, 0, 0);		gbc_poweredLabel.anchor = GridBagConstraints.CENTER;		gbc_poweredLabel.gridx = 4;		gbc_poweredLabel.gridy = 5;		logPanel.add(poweredLabel, gbc_poweredLabel);	}		private void exchangeEncryption()	{		String link = getConfigValue("TestToolWebAppUrl") + getConfigValue("keyExchange");						try		{			FileEncryption fEncryption = new FileEncryption();			fEncryption.makeKeys();				X509EncodedKeySpec spec = KeyFactory.getInstance("RSA").getKeySpec(fEncryption.getRsaPublicKey(),X509EncodedKeySpec.class);						String str = DatatypeConverter.printBase64Binary(spec.getEncoded());			URI URI = new URI(link + authenticatedUser);			logger.debug(URI.toString());			HttpClient httpClient = HttpClientBuilder.create().build();			HttpPost postRequest = new HttpPost(URI);			postRequest.addHeader("Authorization", "bearer " + sessionToken);			postRequest.addHeader("Accept-Encoding", "UTF-8");			HttpEntity httpEntity = MultipartEntityBuilder.create()					.addTextBody("publicKey", str)					.build();			postRequest.setEntity(httpEntity);			HttpResponse response = httpClient.execute(postRequest);			BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent(), "UTF-8"));			StringBuilder builder = new StringBuilder();						for (String line = null; (line = reader.readLine()) != null;)			{			    builder.append(line);			}						cipherKey = fEncryption.decryptAESwithRSA(builder.toString());			fEncryption.setAesSecretKey(cipherKey);		}		catch(IOException e1)		{			JOptionPane.showMessageDialog(null, "Fail in the communication with the Test Tool Web Server");		}		catch (URISyntaxException e)		{			logger.error("Malformed URL");		}		catch (GeneralSecurityException e)		{			// TODO Auto-generated catch block			e.printStackTrace();		}	}	/**	 * Creates and makes visible the Dialog that alerts the user of the presence of a new	 * CTT Local Agent Version	 */	protected void getLastVersionWindow(String newestVersion)	{		InstallLastVersionWindow installWindow = new InstallLastVersionWindow(this, 				sessionToken, CTT_LOCAL_AGENT_VERSION, newestVersion, logger.getLevel());		installWindow.setModalityType(ModalityType.APPLICATION_MODAL);		installWindow.setVisible(true);		}	/**	 * Checks if the installed version of CTT Local Agent is up-to-date.	 *	 * @return TRUE if the installed version is the last one, FALSE otherwise	 */	protected List<Object> isLastVersion()	{		Boolean isLast = false;		String version = "";		List<Object> list = new ArrayList<Object>();		String link = getConfigValue("TestToolWebAppUrl") + getConfigValue("isLastVersion");				try		{			URI URI = new URI(link + CTT_LOCAL_AGENT_VERSION.replace(".", "_").substring(1));			HttpClient httpClient = HttpClientBuilder.create().build();			HttpGet postRequest = new HttpGet(URI);			postRequest.addHeader("Authorization", "bearer " + sessionToken);			HttpResponse response = httpClient.execute(postRequest);			HttpEntity entity = response.getEntity();			BufferedReader br = new BufferedReader(new InputStreamReader((entity.getContent())));			String output;			while ((output = br.readLine()) != null)			{				if (output.contains("new version available"))				{					isLast = false;					version = output.split(":")[1].substring(1);				}				else if (output.equals("version up to date"))				{					isLast = true;				}			}			list.add(isLast);			list.add(version);		}		catch(IOException e1)		{			JOptionPane.showMessageDialog(null, "Fail in the communication with the Test Tool Web Server");		}		catch (URISyntaxException e)		{			logger.error("URL not valid");		}		return list;	}	/**	 * Sets the connect msg.	 *	 * @param msg the new connect msg	 */	public void setConnectMsg(String msg)	{		connectingMessage = msg;		connectingLabel.setText(connectingMessage);		connectingLabel.setVisible(true);	}	/**	 * Gets the header panel. 	 * This function is used by other classes.	 *	 * @return the header panel	 */	protected ImagePanel getHeaderPanel()	{		return new ImagePanel(RESOURCES_PATH + File.separator + HEADER);	}		/**	 * Gets the project window.	 *	 * @return the project window	 */	protected void getProjectWindow()	{		MAIN_FRAME.dispose();		MAIN_FRAME.setVisible(false);					MAIN_FRAME.setBounds(setCenteredRectangle(PROJECT_WINDOW_WIDTH, PROJECT_WINDOW_HEIGHT));		initMainFrame();				MAIN_FRAME.setPreferredSize(new Dimension(700, Toolkit.getDefaultToolkit().getScreenSize().height));		MAIN_FRAME.setResizable(false);				ProjectWindow projectWindow = null;				try		{			projectWindow = new ProjectWindow(this, authenticatedUser, sessionToken, logger.getLevel());		}		catch (SAXException | IOException | ParserConfigurationException e1)		{			logger.error("Not posible to obtain projects information from Web Server");			e1.printStackTrace();			JOptionPane.showMessageDialog(null, "Fail in the communication with the Test Tool Web Server");		}		MAIN_FRAME.getContentPane().add(projectWindow, BorderLayout.CENTER);		MAIN_FRAME.getContentPane().add(setPanelFooter(projectWindow), BorderLayout.SOUTH);		MAIN_FRAME.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);		MAIN_FRAME.addWindowListener(new WindowAdapter()		{			public void windowClosing(WindowEvent e)			{				System.exit(0);			}		});		MAIN_FRAME.setVisible(true);	}		private ImagePanel setPanelFooter(ProjectWindow projectWindow)	{		ImagePanel footer = new ImagePanel(RESOURCES_PATH + File.separator + SHORT_FOOTER);		GridBagLayout gridBagLayout = new GridBagLayout();		gridBagLayout.columnWeights = new double[]{0.5, 0.5, 0.5};		gridBagLayout.rowWeights = new double[]{0.9};		footer.setLayout(gridBagLayout);				setNextButton(projectWindow, footer);		setRefreshButton(footer);		connectingLabel = new JLabel(connectingMessage);		connectingLabel.setVisible(false);		GridBagConstraints gbc_connectingLabel = new GridBagConstraints();		gbc_connectingLabel.gridx = 1;		gbc_connectingLabel.gridy = 0;		gbc_connectingLabel.insets = new Insets(20, 0, 20, 0);		footer.add(connectingLabel, gbc_connectingLabel);				return footer;	}		private void setNextButton(ProjectWindow projectWindow, ImagePanel projectWindowFooter)	{		JButton nextButton = new JButton("");		Dimension preferredButtonSize = new Dimension(76, 24);		nextButton.setPreferredSize(preferredButtonSize);		nextButton.setIcon(new ImageIcon(readImageFromFile(RESOURCES_PATH, NEXT_BUTTON)));		nextButton.addActionListener(new ActionListener()		{			public void actionPerformed(ActionEvent e)			{				try				{					int id = projectWindow.getProjectId();					MAIN_FRAME.setVisible(false);					getTestCasesWindow(id, projectWindow.getVersion());				}				catch (IndexOutOfBoundsException ex)				{					JOptionPane.showMessageDialog(MAIN_FRAME, "Select a configured project");				}			}		});				GridBagConstraints nextButtonConstraints = new GridBagConstraints();		nextButtonConstraints.insets = new Insets(20, 0, 20, 0);		nextButtonConstraints.gridx = 2;		nextButtonConstraints.gridy = 0;		projectWindowFooter.add(nextButton, nextButtonConstraints);	}		private void setRefreshButton(ImagePanel projectWindowFooter)	{		JButton refreshButton = new JButton("");		refreshButton.setIcon(new ImageIcon(readImageFromFile(RESOURCES_PATH, REFRESH_BUTTON)));		Dimension preferredSize = new Dimension(103,24);		refreshButton.setPreferredSize(preferredSize);				refreshButton.addActionListener(new ActionListener()		{			@Override			public void actionPerformed(ActionEvent e)			{				getProjectWindow();			}		});				GridBagConstraints refreshButtonConstraints = new GridBagConstraints();		refreshButtonConstraints.insets = new Insets(20, 0, 20, 0);		refreshButtonConstraints.gridx = 0;		refreshButtonConstraints.gridy = 0;		refreshButtonConstraints.fill = GridBagConstraints.NONE;		projectWindowFooter.add(refreshButton, refreshButtonConstraints);	}		/**	 * Gets the test cases window.	 *	 * @param projectId	 * 			the Database entry ID of the project to be downloaded from the Web Server	 * @param certificationReleaseVersion	 * 			the certification release of the project and, consequently, of the Test Cases Package.	 * 			It follows the format: vXX_YY_ZZz.	 */	protected void getTestCasesWindow(int projectId, String certificationReleaseVersion)	{		MAIN_FRAME.dispose();		initMainFrame();		MAIN_FRAME.setVisible(false);		MAIN_FRAME.setResizable(false);				boolean isDebugAndReleaseExists = isDebugAndThereIsRelease(certificationReleaseVersion);				if (isAvailableVersion(certificationReleaseVersion) && (!isDebugAndReleaseExists))		{			if (isLastReleaseVersion(certificationReleaseVersion))			{				try				{					TestCasesWindow testCasesPanel = new TestCasesWindow(this, projectId, certificationReleaseVersion, authenticatedUser, 							sessionToken, logger.getLevel(), cipherKey);					ImagePanel buttons = new ImagePanel(RESOURCES_PATH + File.separator + FOOTER);					GridBagLayout gridBagLayout = new GridBagLayout();					gridBagLayout.columnWeights = new double[]{0.5, 0.5};					gridBagLayout.rowWeights = new double[]{0.9};					buttons.setLayout(gridBagLayout);					JButton runAllButton = new JButton("");							runAllButton.setIcon(new ImageIcon(readImageFromFile(RESOURCES_PATH, RUNALL_BUTTON)));					Dimension preferredSize =new Dimension(83,23);					runAllButton.setPreferredSize(preferredSize);					runAllButton.addActionListener(new ActionListener()					{						@Override						public void actionPerformed(ActionEvent arg0)						{							testCasesPanel.runAllTestCases();						}					});					JButton endButton = new JButton("");										endButton.setIcon(new ImageIcon(readImageFromFile(RESOURCES_PATH, BACK_BUTTON)));					Dimension preferredEndSize = new Dimension(83,23);					endButton.setPreferredSize(preferredEndSize);					endButton.addActionListener(new ActionListener()					{						public void actionPerformed(ActionEvent e)						{							MAIN_FRAME.dispose();							getProjectWindow();						}					});										GridBagConstraints gbc_endButton = new GridBagConstraints();					gbc_endButton.insets = new Insets(20, 0, 20, 0);					gbc_endButton.gridx = 0;					gbc_endButton.gridy = 0;					buttons.add(endButton, gbc_endButton);					GridBagConstraints gbc_runAllButton = new GridBagConstraints();					gbc_runAllButton.insets = new Insets(20, 0, 20, 0);					gbc_runAllButton.gridx = 1;					gbc_runAllButton.gridy = 0;					buttons.add(runAllButton, gbc_runAllButton);					MAIN_FRAME.getContentPane().add(testCasesPanel,BorderLayout.CENTER);					MAIN_FRAME.getContentPane().add(buttons,BorderLayout.SOUTH);				}				catch (SAXException | IOException | ParserConfigurationException e)				{					logger.error("Error while obtaining testcases information from website");				} 				MAIN_FRAME.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);				MAIN_FRAME.addWindowListener(new WindowAdapter()				{					public void windowClosing(WindowEvent e)					{						System.exit(0);					}				});				MAIN_FRAME.setVisible(true);			}			else			{				installLastVersionTestcasesPackage(certificationReleaseVersion);				getTestCasesWindow(projectId, certificationReleaseVersion);			}		}		else		{			InstallTestToolWindow installWindow = new InstallTestToolWindow(this, sessionToken, certificationReleaseVersion, projectId, logger.getLevel(), isDebugAndReleaseExists);			installWindow.setModalityType(ModalityType.APPLICATION_MODAL);			installWindow.setVisible(true);		}	}		private boolean isDebugAndThereIsRelease(final String packageVersion)	{				File folder = new File(getConfigValue("TestCasesPackagePath"));				File[] files = folder.listFiles(new FilenameFilter()		{			@Override			public boolean accept(File dir, String name)			{				return name.contains(packageVersion);			}		});				if (files.length == 0) 			return false;		else		{			for (File f : files)			{				if (f.getName().contains("_R"))				{					return false;				}			}						URI URI;			String result="";			try			{				URI = new URI(getConfigValue("TestToolWebAppUrl") + getConfigValue("ExistsRelease")						+packageVersion.replaceAll("\\.", "_"));				HttpClient httpClient = HttpClientBuilder.create().build();				HttpGet getRequest = new HttpGet(URI);				getRequest.addHeader("Authorization", "bearer " + sessionToken);				HttpResponse response = httpClient.execute(getRequest);				HttpEntity entity = response.getEntity();				BufferedReader br = new BufferedReader(new InputStreamReader(entity.getContent()));								String output;				while ((output = br.readLine()) != null)				{					result += output;				}			}			catch (URISyntaxException e)			{				// TODO Auto-generated catch block				e.printStackTrace();			}			catch (ClientProtocolException e)			{				// TODO Auto-generated catch block				e.printStackTrace();			}			catch (IOException e)			{				// TODO Auto-generated catch block				e.printStackTrace();			}						if (result.equals("true"))			{				return true;			}			else			{				return false;			}		}	}	/**	 * Installs last version of a certain certification release	 * 	 * @param 	ver		certification release	 */	private void installLastVersionTestcasesPackage(String ver)	{		logger.info("Installing last version of testcases Package version: " + ver);		String releaseVersion = getLastReleaseVersion(ver);		String url = getConfigValue("TestToolWebAppUrl") + getConfigValue("GetTechnology") + ver.replace(".", "_") + "_" + releaseVersion;				logger.debug(url);		try		{			URI URI = new URI(url);			FileOutputStream fos = null;			HttpClient httpClient = HttpClientBuilder.create().build();			HttpGet postRequest = new HttpGet(URI);			postRequest.addHeader("Authorization", "bearer " + sessionToken);			HttpResponse response = httpClient.execute(postRequest);			HttpEntity entity = response.getEntity();			logger.debug("Response Entity:"+entity);			BufferedHttpEntity buf = new BufferedHttpEntity(entity);			try			{				fos = new FileOutputStream(getConfigValue("TestCasesPackagePath") + "TestCases_Package_" + ver + "_" + releaseVersion + ".jar");			}			catch (FileNotFoundException e)			{				File dir = new File(getConfigValue("TestCasesPackagePath"));								if (dir.mkdirs())				{					fos = new FileOutputStream(getConfigValue("TestCasesPackagePath") + "TestCases_Package_" + ver + "_" + releaseVersion + ".jar");				}			}			buf.writeTo(fos);		}		catch(IOException e1)		{			JOptionPane.showMessageDialog(null, "Fail in the communication with the Test Tool Web Server");		}		catch (URISyntaxException e)		{			e.printStackTrace();		}		InputStream inputStream = null;		String path = (new File("")).getAbsolutePath();		String inputFile = "jar:file:/" + path + "/" + getConfigValue("TestCasesPackagePath") + "TestCases_Package_" + ver + "_" 				+ releaseVersion + ".jar!/alljoyn_java.dll";		logger.info("Extracting alljoyn_java.dll from: " + inputFile);		String libPath = path + File.separator + "lib" + File.separator + ver + File.separator;		logger.info("Installing alljoyn_java.dll in: " + libPath);		File dir = new File(libPath);		dir.mkdirs();		URL inputURL = null;		try		{			inputURL = new URL(inputFile);			JarURLConnection conn = (JarURLConnection)inputURL.openConnection();			inputStream = conn.getInputStream();		}		catch (MalformedURLException e)		{			logger.error("Malformed URL");			return;		}		catch (IOException e)		{			logger.error("IO error opening connection");			return;		}		// write the inputStream to a FileOutputStream		FileOutputStream outputStream = null;		try		{			outputStream = new FileOutputStream(new File(path + File.separator + "lib" + File.separator + ver + File.separator + "alljoyn_java.dll"));		}		catch (FileNotFoundException e)		{			logger.error("Error while creating alljoyn_java.dll");		}		int read = 0;		byte[] bytes = new byte[1024];				try		{			while ((read = inputStream.read(bytes)) != -1)			{				outputStream.write(bytes, 0, read);			}		}		catch (IOException e)		{			logger.error("Error while extracting alljoyn_java.dll from jar file");		}				try		{			outputStream.close();		}		catch (IOException e)		{			logger.error("Error closing alljoyn_java.dll");		}	}	/**	 * Retrieves last version of a certain certification release from Web Server	 * 	 * @param 	TestCasesVersion	certification release	 * @return						last version	 */	public String getLastReleaseVersion(String TestCasesVersion)	{		String lastVersion = getTestcasesPackageVersion(TestCasesVersion);		logger.info("Asking to webserver for last release version of " + TestCasesVersion);		String url = getConfigValue("TestToolWebAppUrl") + getConfigValue("isLastTechnologyVersionUrl");		url = url + "/" + TestCasesVersion.replace(".", "_") + "_" + lastVersion;		logger.debug("URL to connect: "+url);		String res = "";		URI URI;		try		{			URI = new URI(url);			HttpClient httpClient = HttpClientBuilder.create().build();			HttpGet postRequest = new HttpGet(URI);			postRequest.addHeader("Authorization", "bearer "+sessionToken);			HttpResponse response = httpClient.execute(postRequest);			HttpEntity entity = response.getEntity();			BufferedReader br = new BufferedReader(new InputStreamReader(entity.getContent()));			String output;						while ((output = br.readLine()) != null)			{				res += output;			}						logger.debug("Response from webserver: "+res);			if (!res.contains("true"))			{				lastVersion=res.split(", ")[1];			}		}		catch (URISyntaxException e)		{			logger.error("URL not valid");			e.printStackTrace();		}		catch (ClientProtocolException e)		{			logger.error("Not posible to connect to webserver");		}		catch (IOException e)		{			logger.error("Not posible to obtain data from webserver");		}		logger.info("Last release version of: " + TestCasesVersion + " is: " + lastVersion);		return lastVersion;	}	/**	 * Checks if installed version of a certain certification release is the last update released	 * 	 * @param 	TestCasesVersion	certification release	 * @return						true if it is the last update, false otherwise	 */	private boolean isLastReleaseVersion(String TestCasesVersion)	{		Boolean isLastVersion = true;		String releaseVersion = getTestcasesPackageVersion(TestCasesVersion);		String url = getConfigValue("TestToolWebAppUrl") + getConfigValue("isLastTechnologyVersionUrl");		url = url + "/" + TestCasesVersion.replace(".", "_") + "_" + releaseVersion;		logger.debug("URL to connect: " + url);		String res = "";		URI URI;		try		{			URI = new URI(url);			HttpClient httpClient = HttpClientBuilder.create().build();			HttpGet postRequest = new HttpGet(URI);			postRequest.addHeader("Authorization", "bearer "+sessionToken);			HttpResponse response = httpClient.execute(postRequest);			HttpEntity entity = response.getEntity();			BufferedReader br = new BufferedReader(new InputStreamReader((entity.getContent())));			String output;						while ((output = br.readLine()) != null)			{				res += output;			}						logger.debug("Response from webserver: "+res);						if(res.contains("true"))			{				isLastVersion = true;				logger.info("Last released version (" + TestCasesVersion + ") installed.");			}			else			{				logger.info("Last released version ("+TestCasesVersion+") not installed.");				isLastVersion = false;			}				}		catch (URISyntaxException e)		{			logger.error("URL not valid");			e.printStackTrace();		}		catch (ClientProtocolException e)		{			logger.error("Not posible to connect to webserver");		}		catch (IOException e)		{			logger.error("Not posible to obtain data from webserver");		}		return isLastVersion;	}		/**	 * Checks if TestCases_Package_version is available to use.	 *	 * @param version the version	 * @return true, if is available version	 */	private boolean isAvailableVersion(final String version)	{		File folder = new File(getConfigValue("TestCasesPackagePath"));				File[] files = folder.listFiles(new FilenameFilter()		{			@Override			public boolean accept(File dir, String name)			{				return name.contains(version);			}		});		return (files.length != 0);	}	/**	 * Gets the highest version number of a certain installed certification release	 * 	 * @param 	TestCasesVersion	certification release	 * @return						version number	 */	public String getTestcasesPackageVersion(final String TestCasesVersion)	{		String releaseVersion = "D0";		File folder = new File(getConfigValue("TestCasesPackagePath"));				logger.debug("Files in : " + folder);				File[] files = folder.listFiles(new FilenameFilter()		{			@Override			public boolean accept(File dir, String name)			{				return name.contains(TestCasesVersion+"_");			}		});				for (File fileEntry : files)		{			String fileName = fileEntry.getName();			logger.debug("File: " + fileName);			String version = fileName.split("\\.")[2].split("_")[1];						logger.debug("Version: " + version);						if (((version.charAt(0) == 'R') && (releaseVersion.charAt(0) =='D'))					|| ((version.charAt(0) == releaseVersion.charAt(0)) && (Integer.parseInt(version.substring(1)) > Integer.parseInt(releaseVersion.substring(1)))))			{				releaseVersion = version;			}		}		return releaseVersion;	}		/**	 * Starts the authentication with the Web Server.	 *	 * @param 	user 			user to be authenticated	 * @param 	pass 			password used in authentication	 * @return 					true if successful login, false otherwise	 */	boolean startAuthentication(String user, String pass)	{		boolean auth = false;		this.authenticatedUser = user;		String url = getConfigValue("TestToolWebAppUrl") + getConfigValue("AuthenticateUrl");					logger.debug("URL to connect: " + url);		MessageDigest m = null;				try		{			m = MessageDigest.getInstance("SHA-256");		}		catch (NoSuchAlgorithmException e1)		{			logger.error("Algorithm SHA-256 is not supported");		}		m.update(pass.getBytes(), 0, pass.length());		byte[] hashBytes = m.digest();		String hashPass = convertByteArrayToHexString(hashBytes);		ClientConfig config = new DefaultClientConfig();		Client client = Client.create(config);		URI uri = UriBuilder.fromUri(url).build();		Form form = new Form();		form.add("username", user);		form.add("password", hashPass);		form.add("client_id", "restapp");		form.add("client_secret", "restapp");		form.add("grant_type", "password");		ClientResponse response = null;		WebResource authService = client.resource(uri);				try		{			response = authService.type(MediaType.APPLICATION_FORM_URLENCODED_TYPE).post(ClientResponse.class, form);			String respuesta = response.getEntity(String.class);  			String token = respuesta.split("\"")[3];			if (response.getStatus() == 200)			{				auth = true;				logger.info("Correct User and Password");			}			else			{				logger.info("Incorrect User and Password");				JOptionPane.showMessageDialog(MAIN_FRAME, "Incorrect User and Password");			}			this.authenticatedUser = user;			this.sessionToken = token;		}		catch (ClientHandlerException e)		{			logger.info("Fail in the communication with the Test Tool Web Server");			JOptionPane.showMessageDialog(null, "Fail in the communication with the Test Tool Web Server");		}		return auth;	}		/**	 * Converts byte array to hex string.	 *	 * @param arrayBytes	 * 			array of bytes to be converted	 * 	 * @return resulting string	 */	private String convertByteArrayToHexString(byte[] arrayBytes)	{		StringBuffer stringBuffer = new StringBuffer();				for (int i = 0; i < arrayBytes.length; i++)		{			stringBuffer.append(Integer.toString((arrayBytes[i] & 0xff) + 0x100, 16).substring(1));		}		return stringBuffer.toString();	}	/**	 * Gets the configuration value from config.xml.	 *	 * @param 	key 	the key whose value is going to be obtained	 * @return 			value	 */	private String getConfigValue(String key)	{		File cfFile = new File(configurationFileName);		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();		DocumentBuilder dBuilder = null;		Document doc = null;		Element element = null;				logger.debug("Retrieving: " + key);		try		{			dBuilder = dbFactory.newDocumentBuilder();			doc = dBuilder.parse(cfFile);			element = (Element) doc.getElementsByTagName("Configuration").item(0);		}		catch (ParserConfigurationException e)		{			logger.error("DB configuration problem");			e.printStackTrace();		}		catch (SAXException e)		{			// TODO Auto-generated catch block			e.printStackTrace();		}		catch (IOException e)		{			logger.error("Configuration file not found");		}				return getValue(key, element);	}	/**	 * Gets the value of the selected tag from config.xml. 	 *	 * @param 	tag 		desired value to recover	 * @param 	element 	element with the xml string	 * @return 				value	 */	private static String getValue(String tag, Element element)	{		NodeList nodes = element.getElementsByTagName(tag).item(0).getChildNodes();		Node node = (Node) nodes.item(0);		return node.getNodeValue();	}	/**	 * Gets the results window.	 *	 * @param projectId	 * 			project ID used in REST request	 */	public void getResultsWindows(int projectId)	{		setConnectMsg("Connecting...");		MAIN_FRAME.setEnabled(false);		MAIN_FRAME.setResizable(false);		ResultWindow resultWindow = new ResultWindow(this,projectId, authenticatedUser, sessionToken, logger.getLevel(), cipherKey);		resultWindow.setModalityType(ModalityType.APPLICATION_MODAL);		resultWindow.setVisible(true);		resultWindow.setAlwaysOnTop(true);		setConnectMsg("Connected");	}}