package com.at4wireless.alljoyn.localagent;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Component;import java.awt.Dimension;import java.awt.EventQueue;import java.awt.FlowLayout;import java.awt.Font;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.GridLayout;import java.awt.HeadlessException;import java.awt.Image;import java.awt.Insets;import java.awt.Rectangle;import java.awt.Toolkit;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.FocusEvent;import java.awt.event.FocusListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.awt.event.WindowListener;import java.awt.image.BufferedImage;import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URI;import java.net.URISyntaxException;import java.net.URL;import java.net.URLClassLoader;import javax.imageio.ImageIO;import javax.swing.AbstractButton;import javax.swing.BoxLayout;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JDialog;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JPasswordField;import javax.swing.JTextField;import javax.swing.SwingConstants;import javax.swing.UIManager;import javax.ws.rs.core.HttpHeaders;import javax.ws.rs.core.MediaType;import javax.ws.rs.core.UriBuilder;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpGet;import org.apache.http.entity.BufferedHttpEntity;import org.apache.http.impl.client.HttpClientBuilder;import org.w3c.dom.Document;import org.w3c.dom.Element;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import org.xml.sax.SAXException;import com.sun.jersey.api.client.Client;import com.sun.jersey.api.client.ClientHandlerException;import com.sun.jersey.api.client.ClientResponse;import com.sun.jersey.api.client.WebResource;import com.sun.jersey.api.client.config.ClientConfig;import com.sun.jersey.api.client.config.DefaultClientConfig;import com.sun.jersey.api.representation.Form;/** * The Class MainWindow. */ public class MainWindow   {	/** The Jframe where that draws all the others windows. */	private static JDialog frame;	private static String version="v1.0.0";	/** The user field for login. */	private JTextField userField;	private String connectMsg="Connecting...";	private JLabel connectingLabel;	private TestCasesWindow testCasesPanel=null;	/** The login button. */	private JButton Button;	private String token;	private String user;	/** The password field for login. */	private JPasswordField passwordField;	private URL url;	private URLClassLoader loader;	/**	 * Launch the application.	 *	 * @param args the arguments	 */	public static void main(String[] args)		{		EventQueue.invokeLater(new Runnable() {			public void run() {				try {					MainWindow window = new MainWindow();					window.frame.setVisible(true);				} catch (Exception e) {					e.printStackTrace();				}			}		});	}	/**	 * Create the application.	 */	public MainWindow() {				url=null;		loader=null;		initialize();	}	/**	 * Initialize the contents of the frame.	 **/	public void initialize() {		try {			//initialize colours			UIManager.put("Button.background", new Color(68, 140, 178));//Background			UIManager.put("Button.foreground", new Color(255, 255, 255));			UIManager.put("Label.background", new Color(0, 136, 130));//Background			UIManager.put("background", new Color(255, 255, 255));			UIManager.put("Panel.background", new Color(255, 255, 255));			UIManager.put("Table.background", new Color(232, 249, 255));			UIManager.put("InternalFrame.optionDialogBackground", new Color(255, 255, 255));			UIManager.put("Viewport.background", new Color(255, 255, 255));			UIManager.put("Table.selectionBackground", new Color(165, 218, 237));			UIManager.put("Table.selectionForeground", new Color(86, 86, 86));			UIManager.put("Table.scrollPaneBorder", new Color(255, 255, 255));			UIManager.put("TableHeader.background",new Color(25, 78, 97));			UIManager.put("TableHeader.font",new Font("Arial", Font.PLAIN, 13));			UIManager.put("TableHeader.foreground",new Color(255, 255, 255));			UIManager.put("Table.font",new Font("Arial", Font.PLAIN, 13));			UIManager.put("Table.foreground",new Color(86, 86, 86));			UIManager.put("OptionPane.background",  new Color(255, 255, 255));			UIManager.put("OptionPane.messagebackground",  new Color(255, 255, 255));			UIManager.put("Panel.background", new Color(255, 255, 255));		} catch (Exception e) {			e.printStackTrace();		}		initMainFrame();		ImagePanel logPanel = getLoggingPanel();				frame.getContentPane().setLayout(new GridLayout());		frame.setUndecorated(true);		frame.setResizable(false);		frame.getRootPane().setDefaultButton(Button);		frame.getContentPane().add(logPanel);						}	private ImagePanel getLoggingPanel() {		ImagePanel logPanel=new ImagePanel("res\\drawable\\MainWindowBackground.jpg");				GridBagLayout gridBagLayout = new GridBagLayout();		gridBagLayout.columnWeights = new double[]{0.0, 0.1, 0.1, 0.1,0.1};		gridBagLayout.rowWeights = new double[]{0.1, 0.1, 0.1, 0.2,0.1, 0.1};		logPanel.setLayout(gridBagLayout);				JLabel lblUser = new JLabel("User Name:");		lblUser.setForeground(new Color(29, 100, 130));		lblUser.setFont(new Font("Arial", Font.PLAIN, 12));		GridBagConstraints gbc_lblUser = new GridBagConstraints();		gbc_lblUser.anchor = GridBagConstraints.SOUTH;		gbc_lblUser.insets = new Insets(20, 5, 10, 0);		gbc_lblUser.gridx = 0;		gbc_lblUser.gridy = 3;				logPanel.add(lblUser, gbc_lblUser);		userField = new JTextField();		GridBagConstraints gbc_txtUser = new GridBagConstraints();		gbc_txtUser.anchor = GridBagConstraints.SOUTHWEST;		gbc_txtUser.insets = new Insets(20, 0, 10, 100);		gbc_txtUser.gridx = 1;		gbc_txtUser.gridy = 3;		logPanel.add(userField, gbc_txtUser);		userField.setColumns(15);		JLabel lblPassword = new JLabel("Password:");		lblPassword.setFont(new Font("Arial", Font.PLAIN, 12));		lblPassword.setForeground(new Color(29, 100, 130));		GridBagConstraints gbc_lblPassword = new GridBagConstraints();		gbc_lblPassword.anchor = GridBagConstraints.CENTER;		gbc_lblPassword.insets = new Insets(0, 0, 0, 0);		gbc_lblPassword.gridx = 0;		gbc_lblPassword.gridy =4;		logPanel.add(lblPassword, gbc_lblPassword);		passwordField = new JPasswordField();				GridBagConstraints gbc_passwordField = new GridBagConstraints();		gbc_passwordField.anchor = GridBagConstraints.WEST;		gbc_passwordField.insets = new Insets(0, 0, 0, 100);		gbc_lblPassword.anchor = GridBagConstraints.WEST;		gbc_passwordField.gridx = 1;		gbc_passwordField.gridy = 4;		logPanel.add(passwordField, gbc_passwordField);		passwordField.setColumns(15);				Button = new JButton("");		Button.setBorderPainted(false); 		Button.setContentAreaFilled(false); 		 Image img = null;		try {						img = ImageIO.read(new File("res\\drawable\\ico_login.png"));		} catch (IOException e2) {			// TODO Auto-generated catch block			e2.printStackTrace();		}		 Button.setIcon(new ImageIcon(img));						GridBagConstraints gbc_btnNewButton = new GridBagConstraints();		gbc_btnNewButton.gridheight = 0;		gbc_btnNewButton.gridwidth = 1;		gbc_btnNewButton.anchor = GridBagConstraints.NORTH;		gbc_btnNewButton.insets = new Insets(0, 0, 20, 35);		gbc_btnNewButton.gridx = 1;				gbc_btnNewButton.gridy = 5;		logPanel.add(Button, gbc_btnNewButton);		Button.addFocusListener(new FocusListener(){			@Override			public void focusGained(FocusEvent arg0) {				setConnectMsg("Connecting...");				connectingLabel.setVisible(true);				Button.setFocusable(false);											}			@Override			public void focusLost(FocusEvent arg0) {				Button.setFocusable(true);							}});		Button.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				setConnectMsg("Connecting...");				connectingLabel.setVisible(true);								try {																								if(startAuthentication(userField.getText(), passwordField.getText())){						frame.setVisible(false);						setConnectMsg("Connected");						if(isLastVersion()){							getProjectWindow();						}else{														getLastVersionWindow();						}											}else {												connectingLabel.setVisible(false);										}				} catch (HeadlessException | IOException e1) {					// TODO Auto-generated catch block					e1.printStackTrace();				}			}		});				JButton buttonClose = new JButton("");		buttonClose.setBorderPainted(false); 		buttonClose.setContentAreaFilled(false); 		  img = null;		try {						img = ImageIO.read(new File("res\\drawable\\ico_close.jpg"));		} catch (IOException e2) {			// TODO Auto-generated catch block			e2.printStackTrace();		}		buttonClose.setIcon(new ImageIcon(img));						GridBagConstraints gbc_buttonClose= new GridBagConstraints();		gbc_buttonClose.anchor = GridBagConstraints.NORTHEAST;		gbc_buttonClose.gridheight = 0;		gbc_buttonClose.gridwidth = 1;				gbc_buttonClose.insets = new Insets(0, 20, 20, 0);		gbc_buttonClose.gridx = 0;				gbc_buttonClose.gridy = 5;		logPanel.add(buttonClose, gbc_buttonClose);		buttonClose.addActionListener(new ActionListener(){			@Override			public void actionPerformed(ActionEvent e) {				frame.dispose();							}});		connectingLabel = new JLabel(connectMsg);		connectingLabel.setVisible(false);		GridBagConstraints gbc_connectingLabel = new GridBagConstraints();		gbc_connectingLabel.gridx = 1;		gbc_connectingLabel.gridy = 5;		gbc_connectingLabel.anchor = GridBagConstraints.NORTHWEST;		gbc_connectingLabel.insets = new Insets(10, 2, 0, 0);		logPanel.add(connectingLabel, gbc_connectingLabel);																JLabel versionLabel = new JLabel("AllSeen Test Tool Local Agent "+version);		versionLabel.setFont(new Font("Arial", Font.PLAIN, 11));		versionLabel.setForeground(new Color(79, 80, 80));				GridBagConstraints gbc_versionLabel = new GridBagConstraints();		gbc_versionLabel.anchor = GridBagConstraints.NORTH;		gbc_versionLabel.insets = new Insets(20, 0, 0, 0);		gbc_versionLabel.gridx = 4;		gbc_versionLabel.gridy = 5;				logPanel.add(versionLabel,gbc_versionLabel);		JLabel poweredLabel = new JLabel("Powered by AT4 wireless");				poweredLabel.setFont(new Font("Arial", Font.PLAIN, 11));		poweredLabel.setForeground(new Color(79, 80, 80));		GridBagConstraints gbc_poweredLabel = new GridBagConstraints();		gbc_poweredLabel.insets = new Insets(10, 0, 0, 0);		gbc_poweredLabel.anchor = GridBagConstraints.CENTER;		gbc_poweredLabel.gridx = 4;		gbc_poweredLabel.gridy = 5;		logPanel.add(poweredLabel,gbc_poweredLabel);																return logPanel;	}	protected void getLastVersionWindow() {								InstallLastVersionWindow installWindow=new InstallLastVersionWindow(this,token,version);		installWindow.setModalityType(JDialog.DEFAULT_MODALITY_TYPE.APPLICATION_MODAL);		installWindow.setVisible(true);									}	protected boolean isLastVersion() {	boolean isLast = false;	String test="";		String link=getConfigValue("TestToolWebAppUrl")   				+ getConfigValue("isLastVersion");		try{	URI URI = new URI(link+version.replace(".", "_").substring(1));	System.out.println(link+version.replace(".", "_").substring(1));	HttpClient httpClient = HttpClientBuilder.create().build();	HttpGet postRequest = new HttpGet(URI);	postRequest.addHeader("Authorization", "bearer "+token);	HttpResponse response = httpClient.execute(postRequest);	HttpEntity entity = response.getEntity();	System.out.println("Entity:"+entity);	BufferedReader br = new BufferedReader(new InputStreamReader(			(entity.getContent())));	String output;			while ((output = br.readLine()) != null) {				test=test+output;		System.out.println(output);		if(output.equals("new version available")){			isLast = false;		}else if(output.equals("version up to date")){			isLast = true;		}	}				}catch(IOException e1){						JOptionPane.showMessageDialog(null, "Fail in the communication with the Test Tool Web Server"					);		} catch (URISyntaxException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}										return isLast;	}	public void setConnectMsg(String msg) {						connectMsg=msg;		connectingLabel.setText(connectMsg);		connectingLabel.setVisible(true);					}	private void initMainFrame() {		Rectangle bounds = null ;		if(frame!=null){			bounds = frame.getBounds();			frame.dispose();		}		frame = new JDialog();				frame.dispose();		if(bounds==null||bounds.getWidth()<100||bounds.getHeight()<100){			Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();			int width=700;			int height=300;			bounds = new Rectangle((int) (dim.width/2)-width/2, 					(int) (dim.height/2)-height/2,					width, 					height);		}		frame.setBounds(bounds);				frame.setPreferredSize(new Dimension(700, Toolkit.getDefaultToolkit().getScreenSize().height));									}	protected ImagePanel getHeaderPanel() {		return  new ImagePanel("res\\drawable\\header.jpg");	}	/**	 * Gets the project window.	 *	 * @return the project window	 */	protected void getProjectWindow() {		frame.dispose();		frame.setVisible(false);					Rectangle bounds = null ;		Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();		int width=1000;		int height=500;		bounds = new Rectangle((int) (dim.width/2)-width/2, 				(int) (dim.height/2)-height/2,				width, 				height);		frame.setBounds(bounds);				initMainFrame();		frame.setPreferredSize(new Dimension(700, Toolkit.getDefaultToolkit().getScreenSize().height));		frame.setResizable(false);		ProjectWindow ProjectPanel = null;		try {			ProjectPanel = new ProjectWindow(this,user, token);		} catch (SAXException | IOException | ParserConfigurationException e1) {			// TODO Auto-generated catch block			e1.printStackTrace();			Component button = null;			JOptionPane.showMessageDialog(null, "Fail in the communication with the Test Tool Web Server"					);		}				frame.getContentPane().add(ProjectPanel,BorderLayout.CENTER);		Button = new JButton("");				Button.setBorderPainted(false); 		Button.setContentAreaFilled(false); 		 Image img = null;		try {						img = ImageIO.read(new File("res\\drawable\\ico_next.png"));		} catch (IOException e2) {			// TODO Auto-generated catch block			e2.printStackTrace();		}		 Button.setIcon(new ImageIcon(img));								final ProjectWindow listener=ProjectPanel;		Button.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				try{					int id=listener.getProjectId();					frame.setVisible(false);					getTestCasesWindow(id, listener.getVersion());				}catch(ArrayIndexOutOfBoundsException ex){					JOptionPane.showMessageDialog(frame, "Select a configured project");				}catch(FileNotFoundException ex){					Component button = null;					JOptionPane.showMessageDialog(null, "Fail in the communication with the Test Tool Web Server"							);}			}});				GridBagConstraints gbc_btnNewButton = new GridBagConstraints();		gbc_btnNewButton.insets = new Insets(0, 0, 5, 0);		gbc_btnNewButton.gridx = 1;		gbc_btnNewButton.gridy = 0;		JButton refreshButton=new JButton("");				refreshButton.setBorderPainted(false); 		refreshButton.setContentAreaFilled(false); 		 Image img2 = null;		try {						img = ImageIO.read(new File("res\\drawable\\ico_refresh.png"));		} catch (IOException e2) {			// TODO Auto-generated catch block			e2.printStackTrace();		}		refreshButton.setIcon(new ImageIcon(img));		refreshButton.addActionListener(new ActionListener(){			@Override			public void actionPerformed(ActionEvent e) {				getProjectWindow();			}});		ImagePanel footer=new ImagePanel("res\\drawable\\short_footer.jpg");				GridBagLayout gridBagLayout = new GridBagLayout();				gridBagLayout.columnWeights = new double[]{0.5, 0.5, 0.5};		gridBagLayout.rowWeights = new double[]{0.9};		footer.setLayout(gridBagLayout);								GridBagConstraints gbc_refreshButton = new GridBagConstraints();		gbc_refreshButton.insets = new Insets(20, 0, 20, 0);		gbc_refreshButton.gridx = 0;		gbc_refreshButton.gridy = 0;		gbc_refreshButton.fill=GridBagConstraints.BOTH;		footer.add(refreshButton, gbc_refreshButton);						connectingLabel = new JLabel(connectMsg);		connectingLabel.setVisible(false);		GridBagConstraints gbc_connectingLabel = new GridBagConstraints();		gbc_connectingLabel.gridx = 1;		gbc_connectingLabel.gridy = 0;				gbc_connectingLabel.insets =new Insets(20, 0, 20, 0);		footer.add(connectingLabel, gbc_connectingLabel);				GridBagConstraints gbc_Button = new GridBagConstraints();		gbc_Button.insets = new Insets(20, 0, 20, 0);		gbc_Button.gridx = 2;		gbc_Button.gridy = 0;		gbc_Button.fill=GridBagConstraints.BOTH;				footer.add(Button, gbc_Button);		//frame.getRootPane().setDefaultButton(Button);		frame.getContentPane().add(footer, BorderLayout.SOUTH);		frame.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);		frame.addWindowListener(new WindowAdapter(){			public void windowClosing(WindowEvent e) {				System.exit(0);			}		});		frame.setVisible(true);	}	/**	 * Gets the test cases window.	 *	 * @param row the row of the project to download from web	 * @param version the Technology version	 * @return the test cases window	 */	protected void getTestCasesWindow(int projectId, String version) {		frame.dispose();				initMainFrame();		frame.setVisible(false);				frame.setResizable(false);		if(isAvailableVersion(version)){			try {				String path=getConfigValue("CertificationReleasePath")+"TestCases_Package_"+version+".jar";				try {					URL url = new URL("file:"+path);					if(this.url==null) {						this.url = url;						this.loader = URLClassLoader.newInstance(new URL[] {url});					} else if (!this.url.equals(url)) {						this.url = url;						this.loader = URLClassLoader.newInstance(new URL[] {url});					}				} catch (MalformedURLException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}				testCasesPanel=null;				testCasesPanel =new TestCasesWindow(this,projectId,version,user,token, loader);				ImagePanel buttons=new ImagePanel("res//drawable//footer.jpg");								GridBagLayout gridBagLayout = new GridBagLayout();								gridBagLayout.columnWeights = new double[]{0.5, 0.5};				gridBagLayout.rowWeights = new double[]{0.9};								buttons.setLayout(gridBagLayout);								JButton runAllButton = new JButton("");								runAllButton.setBorderPainted(false); 				runAllButton.setContentAreaFilled(false); 				 Image img = null;				try {										img = ImageIO.read(new File("res\\drawable\\run_all.jpg"));				} catch (IOException e2) {					// TODO Auto-generated catch block					e2.printStackTrace();				}				runAllButton.setIcon(new ImageIcon(img));				 				runAllButton.addActionListener(new ActionListener() {					@Override					public void actionPerformed(ActionEvent arg0) {						testCasesPanel.runAllTestCases();											}});												JButton endButton = new JButton("");								endButton.setBorderPainted(false); 				endButton.setContentAreaFilled(false); 				 Image img2 = null;				try {										img2 = ImageIO.read(new File("res\\drawable\\back.jpg"));				} catch (IOException e2) {					// TODO Auto-generated catch block					e2.printStackTrace();				}				endButton.setIcon(new ImageIcon(img2));																endButton.addActionListener(new ActionListener() {					public void actionPerformed(ActionEvent e) {						frame.dispose();						getProjectWindow();					}});				GridBagConstraints gbc_endButton = new GridBagConstraints();				gbc_endButton.insets = new Insets(20, 0, 20, 0);				gbc_endButton.gridx = 0;				gbc_endButton.gridy = 0;				gbc_endButton.fill=GridBagConstraints.BOTH;							buttons.add(endButton, gbc_endButton);												GridBagConstraints gbc_runAllButton = new GridBagConstraints();				gbc_runAllButton.insets = new Insets(20, 0, 20, 0);				gbc_runAllButton.gridx = 1;				gbc_runAllButton.gridy = 0;				gbc_runAllButton.fill=GridBagConstraints.BOTH;				buttons.add(runAllButton, gbc_runAllButton);				//frame.getContentPane().add(getHeaderPanel(),BorderLayout.NORTH);								frame.getContentPane().add(testCasesPanel,BorderLayout.CENTER);								frame.getContentPane().add(buttons,BorderLayout.SOUTH);			} catch (SAXException | IOException | ParserConfigurationException e) {				// TODO Auto-generated catch block				e.printStackTrace();			} 			frame.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);			frame.addWindowListener(new WindowAdapter(){				public void windowClosing(WindowEvent e) {					System.exit(0);				}			});						frame.setVisible(true);											}else{			InstallTestToolWindow installWindow=new InstallTestToolWindow(this,token,version,projectId);			installWindow.setModalityType(JDialog.DEFAULT_MODALITY_TYPE.APPLICATION_MODAL);			installWindow.setVisible(true);		}	}	private boolean isAvailableVersion(String version) {		Boolean isAvailable=true;		Class localAgent = null;		String path=getConfigValue("CertificationReleasePath")+				"TestCases_Package_"+version+".jar";		System.out.println(path);		File file = new File(path);		try {			// Convert File to a URL			URL url = file.toURL();          // file:/c:/myclasses/			URL[] urls = new URL[]{url};			// Create a new class loader with the directory			ClassLoader cl = new URLClassLoader(urls);			// Load in the class; MyClass.class should be located in			// the directory file:/c:/myclasses/com/mycompany			localAgent = cl.loadClass("com.at4wireless.alljoyn.Manager");		} catch (MalformedURLException e) {			System.out.println("Malformed URL");		} catch (ClassNotFoundException e) {			System.out.println("Class not found");			isAvailable=false;		}		return isAvailable;	}		/**	 * Start authentication.	 *	 * @param user the user to login	 * @param pass the pass to login	 * @return true, if successfull login	 * @throws IOException Signals that an I/O exception has occurred.	 */	boolean startAuthentication(String user, String pass) throws IOException{		boolean auth = false;				this.user=user;		String url=getConfigValue("TestToolWebAppUrl")   				+ getConfigValue("AuthenticateUrl");		System.out.println(url);				HttpHeaders header = null;		ClientConfig config = new DefaultClientConfig();		Client client = Client.create(config);		URI uri = UriBuilder.fromUri(url).build();				Form form = new Form();		form.add("username", user);		form.add("password", pass);		form.add("client_id", "restapp");		form.add("client_secret","restapp");		form.add("grant_type", "password");		ClientResponse response = null;				WebResource authService = client.resource(uri);		try{		response = authService.type(MediaType.APPLICATION_FORM_URLENCODED_TYPE).post(ClientResponse.class, form);				String respuesta = response.getEntity(String.class);  		String token = respuesta.split("\"")[3];		System.out.println("Form response" + respuesta);		System.out.println("Token " + token);		if(response.getStatus()==200){			auth=true;		}else{						JOptionPane.showMessageDialog(frame, "Incorrect User and Password");		}		this.user=user;		this.token=token;		}catch(ClientHandlerException e){						JOptionPane.showMessageDialog(null, "Fail in the communication with the Test Tool Web Server"					);					}		return auth;	}	/**	 * Gets the response.	 *	 * @param con the HttpURLConnection to connect	 * @return the response code	 * @throws IOException Signals that an I/O exception has occurred.	 */	private String getResponse(HttpURLConnection con) throws IOException {		BufferedReader in = null;		in = new BufferedReader(				new InputStreamReader(con.getInputStream()));		String inputLine;		StringBuffer response = new StringBuffer();		while ((inputLine = in.readLine()) != null) {			response.append(inputLine);		}		in.close();		return response.toString();	}	private String getConfigValue(String key) {		String value="";		File test = new File("config.xml");		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();		DocumentBuilder dBuilder = null;		try {			dBuilder = dbFactory.newDocumentBuilder();		} catch (ParserConfigurationException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		Document doc = null;		try {			doc = dBuilder.parse(test);		} catch (SAXException | IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		NodeList projects = doc.getElementsByTagName("Configuration");		Node node = projects.item(0);		Element element = (Element) node;		value=getValue(key, element);		System.out.println(value);		return value;	}	/**	 * Gets the value from the selected tag. 	 *	 * @param tag the tag	 * @param element the element	 * @return the value	 */	private static String getValue(String tag, Element element) {		NodeList nodes = element.getElementsByTagName(tag).item(0).getChildNodes();		Node node = (Node) nodes.item(0);		return node.getNodeValue();	}	public void getResultsWindows(int projectId) {		setConnectMsg("Connecting...");				frame.setEnabled(false);						//initMainFrame();		frame.setResizable(false);		ResultWindow resultWindow=new ResultWindow(this,projectId,user,token);		resultWindow.setModalityType(JDialog.DEFAULT_MODALITY_TYPE.APPLICATION_MODAL);		resultWindow.setVisible(true);		resultWindow.setAlwaysOnTop(true);		setConnectMsg("Connected");	}}